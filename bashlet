#!/usr/bin/env bash
# Change this first
THIS_AUTHOR='Josh Cox'

# This name defaults to how it was called
THIS_NAME=$0

# Set verbosity
: ${VERBOSITY:=0}

# And some parallel options
: ${PARALLEL_JOBS:=3}
: ${PARALLEL:="parallel"}

#set -eux

# Rasion d'etre
RAISON=false

# global vars
print_help=no

squawk () {
  # This function simplifies error reporting and verbosity
  # call it by preceding your message with a verbosity level
  # e.g. `squawk 3 "This is a squawk"`
  # if the current verbosity level is greater than or equal 
  # the number given then this function will echo out your message
  # and pad it with # to let you now how verbose that message was
  squawk_lvl=$1
  squawk=$2

  if [ "$VERBOSITY" -ge "$squawk_lvl" ] ; then
  count_squawk=0
    while [ "$count_squawk" -lt "$squawk_lvl" ]; do
      echo -n "#"
      count_squawk=`expr $count_squawk + 1`
    done
    echo " $squawk"
  fi
}

horizontal_rule () {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

usage () {
  horizontal_rule
  # Print usage
echo  "$THIS_NAME, by $THIS_AUTHOR

usage: $THIS_NAME COMMAND
This script is an exmple bash template
e.g.

bashlet echo 'hello world'
"
  horizontal_rule
echo '
commands:

echo - echo back an arguement

help - show the help
'
  horizontal_rule
echo '
options:

 -h --help - Print usage

 --parallel NUMBER_OF_THREADS - set the number of parallel jobs for tasks that support it

 -v --verbose - Increase the verbosity (can set multiple times to incrementally increase e.g. `-vvvv`

 --verbosity NUMBER - or you can set the verbosity directly

 --debug - adds the debug flag
'
}

echo_usage () {
  horizontal_rule
  # Print usage
  echo '--
usage: bashlet echo MY_ECHO

This command echos an argument back at you
e.g.


bashlet echo 'hello world'

options:

 -v --verbose - be verbose
 -h --help - Print usage
'
}

parallel_echo_usage () {
  horizontal_rule
  # Print usage
  echo '--
usage: bashlet parallel_echo

This command shows how to use gnu parallel
e.g.

bashlet --parallel 8 parallel_echo

options:

 --parallel NUMBER - utilize NUMBER of threads
 -v --verbose - be verbose
 -h --help - Print usage
'
}

# Check if a command exists
check_cmd () {
  if ! test_cmd_loc="$(type -p "$1")" || [ -z "$test_cmd_loc" ]; then
    echo "$1 was not found in your path!"
    echo "To proceed please install $1 to your path and try again!"
    exit 1
  fi
}

# Check if a file exists and is writable
check_file () {
  if [ -w "$1" ]; then
    echo "$1 was not writable!"
    exit 1
  fi
}

# Check if a directory is writable, if not attempt to use sudo to rectify
chkdir () {
  if [ ! -w $1 ] ; then
    sudo mkdir -p $1
    sudo chown $USER $1
  fi
  if [ ! -w $1 ] ; then
    echo "Cannot write to $1, please check your permissions"
    exit 2
  fi
}

# Make a tmpdir
check_cmd mktemp
TMP=$(mktemp -d --suffix='.kubash.tmp' 2>/dev/null || mktemp -d -t '.kubash.tmp')

# And remove that tmpdir before exiting
killtmp () {
  cd
  rm -Rf $TMP
}

# Trap the exit
trap killtmp EXIT

checks () {
  squawk 10 " checks"
  check_cmd curl
  check_cmd uname
  if [ "$PARALLEL_JOBS" -gt "1" ] ; then
    check_cmd parallel
  fi
}

my_echo () {
  echo $1
}

echo_in_parallel () {
  PARATMP=$(mktemp -d --suffix='.para.tmp' 2>/dev/null || mktemp -d -t '.para.tmp')
  echo 'master,10.1.1.10,admin,22,7' > $PARATMP/hosts.csv
  echo 'etcd1,10.1.1.11,etcadmin,22,6' >> $PARATMP/hosts.csv
  echo 'etcd2,10.1.1.12,etcadmin,22,5' >> $PARATMP/hosts.csv
  echo 'etcd3,10.1.1.13,etcadmin,22,4' >> $PARATMP/hosts.csv
  echo 'node1,10.1.1.14,nodeadmin,22,3' >> $PARATMP/hosts.csv
  echo 'node2,10.1.1.15,nodeadmin,22,2' >> $PARATMP/hosts.csv
  echo 'node3,10.1.1.16,nodeadmin,22,1' >> $PARATMP/hosts.csv

  squawk 2 ' echo in parallel'
  csv_columns='host ip user port sleep'
  while IFS="," read -r $csv_columns
  do
    echo "sleep $sleep; echo my host is $host, my ip is $ip, my user is $user, my port is $port" \
	      >> $PARATMP/hopper
  done < $PARATMP/hosts.csv

  if [ "$VERBOSITY" -gt "9" ] ; then
    cat $PARATMP/hopper
  fi
  if [ "$PARALLEL_JOBS" -gt "1" ] ; then
    $PARALLEL  -j $PARALLEL_JOBS -- < $PARATMP/hopper
  else
    bash $PARATMP/hopper
  fi
  rm -Rf $PARATMP
}

main () {
  # save original io
  exec 3>&1 4>&2
  # Let's display everything on stderr.
  exec 1>&2

  # If cmd empty print usage
  if [[ -z "$1" ]]; then
    squawk 5 "No Args found printing usage"
    usage
    exit 1
  fi

  squawk 5 'parse opts'

  # Execute getopt on the arguments passed to this program, identified by the special character $@
  short_opts="hv"
  long_opts="help,verbose,verbosity:,parallel:"
  PARSED_OPTIONS=$(getopt -n "$0" -o "$short_opts" --long "$long_opts" -- "$@")

  #Bad arguments, something has gone wrong with the getopt command.
  if [ $? -ne 0 ];
  then
    exit 1
  fi

  # A little magic, necessary when using getopt.
  eval set -- "$PARSED_OPTIONS"

  squawk 5 'loop through opts'

  opt_loop_count=1
  while true; do
    squawk 15 "$opt_loop_count $@"
    opt_loop_count=`expr $opt_loop_count + 1`
    case "$1" in
      -h|--help)
        print_help=true
        shift;;
      --debug)
        debug=true
        shift;;
      --parallel)
        PARALLEL_JOBS="$2"
        shift 2 ;;
      -v|--verbose)
        VERBOSITY=`expr $VERBOSITY + 1`
        shift;;
      --verbosity)
        VERBOSITY=`expr $VERBOSITY + $2`
        squawk 2 " verbosity is now $VERBOSITY"
        shift 2 ;;
      --)
        shift
        break;;
    esac
  done

    squawk 7 "Check args"

  checks

  # If the number of arguments after parsing arguments is 0
  # Then print usage
  if [ $# -eq 0 ]; then
    usage
    exit 1
  # If the number of arguments after parsing arguments is 2
  elif [ $# -eq 2 ]; then
    RAISON=$1
    squawk 5 "Raison set to $RAISON"
    if [[ $RAISON == "my_echo" ]]; then
      if [[ $print_help == "true" ]]; then
        echo_usage
        exit 1
      fi
      my_echo $2
      exit 0
    else
      horizontal_rule
      echo "Command \"$RAISON\" unknown!!! printing usage."
      horizontal_rule
      sleep 2
      usage
      exit 1
    fi
  # If the number of arguments after parsing arguments is 1
  elif [ $# -eq 1 ]; then
    RAISON=$1
    squawk 5 "Raison set to $RAISON"
    # And let's parse the single argument
    if [ $RAISON = "false" -o "$RAISON" = "help" ]; then
      usage
      exit 1
    elif [[ $RAISON == "echo" ]]; then
      if [[ $print_help == "true" ]]; then
        echo_usage
        exit 1
      fi
        horizontal_rule
        echo "Echo requires an argument! printing usage."
        horizontal_rule
        sleep 2
        echo_usage
        exit 1
    elif [[ $RAISON == "parallel_echo" ]]; then
      if [[ $print_help == "true" ]]; then
        parallel_echo_usage
        exit 1
      fi
      echo_in_parallel
    elif [[ $RAISON == "true" ]]; then
  	  squawk 8 'passthru'
    else
      horizontal_rule
      echo "Command \"$RAISON\" unknown!!! printing usage."
      horizontal_rule
      sleep 2
      usage
      exit 1
    fi
  fi

  if [[ $print_help == "true" ]]; then
    usage
    exit 1
  fi

  exit 0
  # End main block
}

main "$@"
